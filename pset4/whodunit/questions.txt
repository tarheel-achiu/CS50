1.  What’s stdint.h?
        
        Stdint.h is a C standard library that allows programmers to write more portable code by providing a set of typedefs that specify exact-width integer types,
        together with defined minimum and maximum allowable values for each data type, using macros
    
2.  What’s the point of using uint8_t, uint32_t, int32_t, and uint16_t in a program?

        They are used so that the programmer can have precise control over the size of variables to ensure portability between platforms and compliers
        Compliers alocate memory in the manner that most efficient to that spesific architecture and can mess up the program if changes were not intended.

3.  How many bytes is a BYTE, a DWORD, a LONG, and a WORD, respectively?

        BYTE is equal to the number of bits (BIT_CHAR) in char (usually 8), in this case it is an unsigned 8 bit int
    
        WORD is an unsigned 16 bit int. Windows data type. Range [0 - 65535]
    
        DWORD (Double WORD) is an unsigned 32 bit int. It is a windows data types Range [0 - 4294967295]
    
        LONG is a signed 32 bit int, Range [−2,147,483,648, +2,147,483,647]

4.  What (in ASCII, decimal, or hexadecimal) must the first two bytes of any BMP file be? Leading bytes used to identify file formats (with high probability)
    are generally called "magic numbers."
    
        ASCII: BM
        Hexadecimal: 0x42 0x4D
        Decimal: 66 77

5.  What’s the difference between bfSize and biSize?

        bfSize is the size, in bytes, of the bitmap file
        
        biSize is the number of bytes required by the structure

6.  What does it mean if biHeight is negative?

        If biHeight is negative the bitmap is a top-down DIB and its origin is the upper-left corner.
        
        If biHeight is positive the bitmap is a bottom-up DIB and its origin is the lower-left corner.

7.  What field in BITMAPINFOHEADER specifies the BMP’s color depth (i.e., bits per pixel)?

         biBitCount: determines the number of bits that define each pixel and the maximum number of colors in the bitmap
         
         Can be: {0, 1, 4, 8, 16, 24, 32}

8.  Why might fopen return NULL in lines 24 and 32 of copy.c?

        It could return NULL for a large number of different reasons but some possibilities are incorrect file path formats, permissions issues, or empty files.

9.  Why is the third argument to fread always 1 in our code?

        The third argument is nmemb − This is the number of elements, each one with a size of size bytes.
        
        Declaration of fread: size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)

10. What value does line 65 of copy.c assign to padding if bi.biWidth is 3?

        sizeof() operator returns in bytes not bits
    
        int padding =  (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
        
        int padding =  (4 - (3 * sizeof(RGBTRIPLE)) % 4) % 4;
        
        int padding =  (4 - (3 * 3) % 4) % 4;
        
        int padding =  4 - 1 % 4;
        
        int padding =  4 - 1;
        
        int padding =  3;

11. What does fseek do?

        fseek sets the file position of the stream to the given offset. In other words, sets the location where fputs will start writing.
        
        In the copy.c program, it allows the program to skip over the padding before fputc writes pixel color value
        
        fseek declaration: int fseek(FILE *stream, long int offset, int whence)
    

12. What is SEEK_CUR?

        SEEK_CUR is a function constant that represents the current position of the file pointer
        
        Other constants include:
            SEEK_SET - Beginning of file
            SEEK_END - End of file


